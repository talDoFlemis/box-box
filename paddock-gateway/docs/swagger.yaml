basePath: /
definitions:
  health.Check:
    properties:
      component:
        allOf:
        - $ref: '#/definitions/health.Component'
        description: Component holds information on the component for which checks
          are made
      failures:
        additionalProperties:
          type: string
        description: Failures holds the failed checks along with their messages.
        type: object
      status:
        allOf:
        - $ref: '#/definitions/health.Status'
        description: Status is the check status.
      system:
        allOf:
        - $ref: '#/definitions/health.System'
        description: System holds information of the go process.
      timestamp:
        description: Timestamp is the time in which the check occurred.
        type: string
    type: object
  health.Component:
    properties:
      name:
        description: Name is the name of the component.
        type: string
      version:
        description: Version is the component version.
        type: string
    type: object
  health.Status:
    enum:
    - OK
    - Partially Available
    - Unavailable
    - Timeout during health check
    type: string
    x-enum-varnames:
    - StatusOK
    - StatusPartiallyAvailable
    - StatusUnavailable
    - StatusTimeout
  health.System:
    properties:
      alloc_bytes:
        description: TotalAllocBytes is the bytes allocated and not yet freed.
        type: integer
      goroutines_count:
        description: GoroutinesCount is the number of the current goroutines.
        type: integer
      heap_objects_count:
        description: HeapObjectsCount is the number of objects in the go heap.
        type: integer
      total_alloc_bytes:
        description: TotalAllocBytes is the total bytes allocated.
        type: integer
      version:
        description: Version is the go version.
        type: string
    type: object
  main.NewPizzaOrderRequest:
    properties:
      destination:
        type: string
      size:
        enum:
        - small
        - medium
        - large
        type: string
      toppings:
        items:
          type: string
        type: array
      username:
        type: string
    required:
    - destination
    - size
    - toppings
    - username
    type: object
  main.NewPizzaOrderResponse:
    properties:
      order_id:
        type: string
      ordered_at:
        type: string
    type: object
  main.Order:
    properties:
      destination:
        type: string
      order_id:
        type: string
      ordered_at:
        type: string
      size:
        type: string
      status:
        description: e.g., "pending", "in_progress", "completed"
        type: string
      toppings:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Paddock Gateway
  version: "1.0"
paths:
  /healthz:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.Check'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/health.Check'
      summary: Check the health of the service
      tags:
      - health
  /v1/order:
    post:
      consumes:
      - application/json
      parameters:
      - description: New Pizza Order Request
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/main.NewPizzaOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.NewPizzaOrderResponse'
        "422":
          description: error
          schema:
            type: string
      summary: Create a new pizza order
      tags:
      - order
  /v1/orders/sse:
    get:
      produces:
      - text/event-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Order'
      summary: Get live orders via Server-Sent Events (SSE)
      tags:
      - order
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
